# RELEASE
# Defines location of external products
include $(TOP)/RELEASE_SITE

# ===============================================================
# Define the version of modules needed by
# IOC apps or other Support apps
# ===============================================================
AUTOSAVE_MODULE_VERSION = R5.11-2.0.0
IOCADMIN_MODULE_VERSION = R3.1.16-1.4.0
ASYN_MODULE_VERSION = R4.42-1.0.0
MOTOR_MODULE_VERSION = R6.9-ess-0.0.4
ETHERCATMC_MODULE_VERSION = R2.1.0-0.1.5
ADS_MODULE_VERSION = R2.0.0-0.0.11
CAPUTLOG_MODULE_VERSION = R4.0-1.0.0

# ============================================================
# External Support module path definitions
#
# If any of these macros expand to a path which
# contains an "include" directory, that directory will be
# included in the compiler include path.
#
# If any of these macros expand to a path which
# contains a "lib/<arch>" directory, that directory will be
# included in the compiler link path for that architecture.
#
# If your build fails, look for these paths in your build output
# ============================================================
#MY_MODULES=/cds/home/z/zlentz/github/epics/ads-ioc-fix/modules

AUTOSAVE=$(EPICS_MODULES)/autosave/$(AUTOSAVE_MODULE_VERSION)
IOCADMIN=$(EPICS_MODULES)/iocAdmin/$(IOCADMIN_MODULE_VERSION)
ETHERCATMC=$(EPICS_MODULES)/ethercatmc/$(ETHERCATMC_MODULE_VERSION)
#ETHERCATMC=$(MY_MODULES)/ethercatmc
MOTOR=$(EPICS_MODULES)/motor/$(MOTOR_MODULE_VERSION)
#MOTOR=$(MY_MODULES)/motor
ASYN=$(EPICS_MODULES)/asyn/$(ASYN_MODULE_VERSION)
ADS=$(EPICS_MODULES)/twincat-ads/$(ADS_MODULE_VERSION)
#ADS=$(MY_MODULES)/twincat-ads
CAPUTLOG=$(EPICS_MODULES)/caPutLog/$(CAPUTLOG_MODULE_VERSION)

#MCB_MODULES=/reg/neh/home4/mcbrowne/git/modules

# ===============================================================
# Define the location and version of EPICS base
# ===============================================================
EPICS_BASE=$(EPICS_SITE_TOP)/base/$(BASE_MODULE_VERSION)

# Set externally by tools that want to introspect Makefiles:
ifneq ($(_DEPENDENCY_CHECK_),1)

# Check for valid EPICS_BASE
ifeq ($(wildcard $(EPICS_BASE)/include),)
$(error Invalid EPICS_BASE: $(EPICS_BASE)/include)
endif

# Check for valid modules
ifeq ($(wildcard $(AUTOSAVE)/lib/$(T_A)),)
$(error Invalid AUTOSAVE: $(AUTOSAVE)/lib/$(T_A))
endif

ifeq ($(wildcard $(IOCADMIN)/lib/$(T_A)),)
$(error Invalid IOCADMIN: $(IOCADMIN)/lib/$(T_A))
endif

ifeq ($(wildcard $(ASYN)/lib/$(T_A)),)
$(error Invalid ASYN: $(ASYN)/lib/$(T_A))
endif

ifeq ($(wildcard $(ETHERCATMC)/lib/$(T_A)),)
$(error Invalid ETHERCATMC: $(ETHERCATMC)/lib/$(T_A))
endif

ifeq ($(wildcard $(MOTOR)/lib/$(T_A)),)
$(error Invalid MOTOR: $(MOTOR)/lib/$(T_A))
endif

ifeq ($(wildcard $(ADS)/lib/$(T_A)),)
$(error Invalid ADS: $(ADS)/lib/$(T_A))
endif

ifeq ($(wildcard $(CAPUTLOG)/lib/$(T_A)),)
$(error Invalid CAPUTLOG: $(CAPUTLOG)/lib/$(T_A))
endif

endif
